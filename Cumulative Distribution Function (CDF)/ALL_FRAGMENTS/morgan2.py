# -*- coding: utf-8 -*-
"""Structural_diversity_CRAFT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SJU7Hz9iQqpvMHYcVAPzRXmW6wL-HTZU
"""

import rdkit
import pandas as pd
import numpy as np
from sys import argv
from rdkit import Chem
from rdkit.Chem import MACCSkeys, AllChem
from rdkit.Chem import rdFingerprintGenerator
from scipy.spatial.distance import pdist

#from google.colab import drive
#drive.mount('/content/drive')

print(f"rdkit_version: {rdkit.__version__}")

"""## Diagramas de Venn CRAFT vs otras bases de datos de fragmentos curados que siguen la regla de 3"""

# Fragmentos que no sigen la recgla de tres
url_data = "https://drive.google.com/file/d/12wkBXwTI58xVjRmhaOyG_jiiCRFOi3Ov/view?usp=sharing"
url_data='https://drive.google.com/uc?id=' + url_data.split('/')[-2]
lanapdb = pd.read_csv(url_data)
lanapdb.tail(2)
print(lanapdb.columns)

coconut = pd.read_csv(argv[1], sep=",") 
coconut.tail(2)
print(coconut.columns)

url_data_EnamineSolWat = "https://drive.google.com/file/d/14joMGmdMgnzPRopRWMXdEx4myLAHHGbc/view?usp=drive_link"
url_data_EnamineSolWat ='https://drive.google.com/uc?id=' + url_data_EnamineSolWat.split('/')[-2]
EnamineSolWat = pd.read_csv(url_data_EnamineSolWat)
EnamineSolWat.tail(2)
print(EnamineSolWat.columns)
 
url_data_ChemDiv = "https://drive.google.com/file/d/14QjDAGOqvgPehTEc0290gzCmASlaijXB/view?usp=sharing"
url_data_ChemDiv ='https://drive.google.com/uc?id=' + url_data_ChemDiv.split('/')[-2]
ChemDiv = pd.read_csv(url_data_ChemDiv)
ChemDiv.tail(2)
print(ChemDiv.columns)

url_data_Maybridge = "https://drive.google.com/file/d/18TQoiXtGLY6LS95y5iR3UvTE_CuZyZnM/view?usp=drive_link"
url_data_Maybridge='https://drive.google.com/uc?id=' + url_data_Maybridge.split('/')[-2]
Maybridge = pd.read_csv(url_data_Maybridge)
Maybridge.tail(2)
print(Maybridge.columns)

url_data_LifeChemicals = "https://drive.google.com/file/d/1XEgnLH8ykiuuYv55341RV0ISqh5yoAXa/view?usp=sharing"
url_data_LifeChemicals ='https://drive.google.com/uc?id=' + url_data_LifeChemicals.split('/')[-2]
LifeChemicals = pd.read_csv(url_data_LifeChemicals)
LifeChemicals.tail(2)
print(LifeChemicals.columns)

url_data_CRAFT = "https://drive.google.com/file/d/1aKUcchg7A705tYIXbWaZj_OiYaLNCQ4k/view?usp=sharing"
url_data_CRAFT ='https://drive.google.com/uc?id=' + url_data_CRAFT.split('/')[-2]
CRAFT = pd.read_csv(url_data_CRAFT)
CRAFT.tail(2)
print(CRAFT.columns)

"""## Commulative distribution function

#### Functions
"""

def ECFP (smi, r):
    fps = pd.DataFrame([[int(y) for y in rdFingerprintGenerator.GetMorganGenerator(radius=r, fpSize=1024).GetFingerprint(Chem.MolFromSmiles(x)).ToBitString()] for x in smi])
    SimMat = 1 - pdist(fps[[x for x in range(1024)]], metric="jaccard") # Similarity Matrix
    #print(SimMat.shape)
    #SimMat = round(np.median(SimMat), 3)
    return SimMat

def MACCSkeys_fp (smi):
    fps = pd.DataFrame([[int(y) for y in MACCSkeys.GenMACCSKeys(Chem.MolFromSmiles(x)).ToBitString()] for x in smi])
    SimMat = 1 - pdist(fps[[x for x in range(167)]], metric="jaccard") # Similarity Matrix
    #print(SimMat.shape)
    #SimMat = round(np.median(SimMat), 3)
    return SimMat

# Fragmentos que no siguen la regla de tres
EnamineSolWat = list(EnamineSolWat["SMILES_chiral"])
#lanapdb = list(lanapdb["SMILES_chiral"])
#coconut = list(coconut["SMILES_chiral"])
#ChemDiv = list(ChemDiv["SMILES_chiral"])
Maybridge = list(Maybridge["SMILES_chiral"])
#LifeChemicals = list(LifeChemicals["SMILES_chiral"])
CRAFT = list(CRAFT["SMILES_chiral"])

number_sample=5000

# COCONUT sample for Morgan2
SimMatECFP4_coconut_sorted = []
for i in range(10):
    sample = coconut.sample(number_sample, random_state=i).copy()
    sample= np.sort(ECFP(sample["SMILES_chiral"], 2))
    SimMatECFP4_coconut_sorted.append(sample)
print(f"ECFP4_coconut: {len(SimMatECFP4_coconut_sorted)}")
SimMatECFP4_coconut_sorted1 = SimMatECFP4_coconut_sorted[0]
print(f"SimMatECFP4_coconut_RO3_sorted1: {len(SimMatECFP4_coconut_sorted1)}")
coconut=0
# LifeChemicals sample for Morgan2
SimMatECFP4_LifeChemicals_sorted = []
for i in range(10):
    sample = LifeChemicals.sample(number_sample, random_state=i).copy()
    sample= np.sort(ECFP(sample["SMILES_chiral"],2))
    SimMatECFP4_LifeChemicals_sorted.append(sample)

print(f"ECFP4_LifeChemicals: {len(SimMatECFP4_LifeChemicals_sorted)}")
SimMatECFP4_LifeChemicals_sorted1 = SimMatECFP4_LifeChemicals_sorted[0]
print(f"SimMatECFP4_LifeChemicals_sorted1: {len(SimMatECFP4_LifeChemicals_sorted1)}")
LifeChemicals=0
# ChemDiv sample for Morgan2
SimMatECFP4_ChemDiv_sorted = []
for i in range(10):
    sample = ChemDiv.sample(number_sample, random_state=i).copy()
    sample= np.sort(ECFP(sample["SMILES_chiral"], 2))
    SimMatECFP4_ChemDiv_sorted.append(sample)
print(f"ECFP4_ChemDiv: {len(SimMatECFP4_ChemDiv_sorted)}")
SimMatECFP4_ChemDiv_sorted1 = SimMatECFP4_ChemDiv_sorted[0]
print(f"SimMatECFP4_ChemDiv_sorted1: {len(SimMatECFP4_ChemDiv_sorted1)}")
ChemDiv=0
# LANaPDB sample for Morgan2
SimMatECFP4_lanapdb_sorted = []
for i in range(10):
    sample = lanapdb.sample(number_sample, random_state=i).copy()
    sample= np.sort(ECFP(sample["SMILES_chiral"], 2))
    SimMatECFP4_lanapdb_sorted.append(sample)
print(f"ECFP4_Maybridge: {len(SimMatECFP4_lanapdb_sorted)}")
SimMatECFP4_lanapdb_sorted1 = SimMatECFP4_lanapdb_sorted[0]
print(f"SimMatECFP4_Maybridge_sorted1: {len(SimMatECFP4_lanapdb_sorted1)}")
lanapdb=0

"""### Morgan2"""

# 1. Sort data
SimMatECFP4_EnamineSolWat_sorted = np.sort(ECFP(EnamineSolWat, 2))
print(SimMatECFP4_EnamineSolWat_sorted)
#SimMatECFP4_lanapdb_sorted = np.sort(ECFP(lanapdb, 2))
#SimMatECFP4_coconut_sorted = np.sort(ECFP(coconut, 2))
#SimMatECFP4_ChemDiv_sorted = np.sort(ECFP(ChemDiv, 2))
SimMatECFP4_Maybridge_sorted = np.sort(ECFP(Maybridge, 2))
#SimMatECFP4_LifeChemicals_sorted = np.sort(ECFP(LifeChemicals, 2))
SimMatECFP4_CRAFT_sorted = np.sort(ECFP(CRAFT, 2))


# calculate the proportional values of samples for ECFP4 y ECFP6
proportionECFP4_EnamineSolWat = 1. * np.arange(len(SimMatECFP4_EnamineSolWat_sorted)) / (len(SimMatECFP4_EnamineSolWat_sorted) - 1)
print(len(proportionECFP4_EnamineSolWat))

proportionECFP4_lanapdb = 1. * np.arange(len(SimMatECFP4_lanapdb_sorted1)) / (len(SimMatECFP4_lanapdb_sorted1) - 1)
print(len(proportionECFP4_lanapdb))

proportionECFP4_coconut = 1. * np.arange(len(SimMatECFP4_coconut_sorted1)) / (len(SimMatECFP4_coconut_sorted1) - 1)
print(len(proportionECFP4_coconut))

proportionECFP4_ChemDiv = 1. * np.arange(len(SimMatECFP4_ChemDiv_sorted1)) / (len(SimMatECFP4_ChemDiv_sorted1) - 1)
print(len(proportionECFP4_ChemDiv))

proportionECFP4_Maybridge = 1. * np.arange(len(SimMatECFP4_Maybridge_sorted)) / (len(SimMatECFP4_Maybridge_sorted) - 1)
print(len(proportionECFP4_Maybridge))

proportionECFP4_LifeChemicals = 1. * np.arange(len(SimMatECFP4_LifeChemicals_sorted1)) / (len(SimMatECFP4_LifeChemicals_sorted1) - 1)
print(len(proportionECFP4_LifeChemicals))

proportionECFP4_CRAFT = 1. * np.arange(len(SimMatECFP4_CRAFT_sorted)) / (len(SimMatECFP4_CRAFT_sorted) - 1)
print(len(proportionECFP4_CRAFT))

lanapdb=0
coconut=0
ChemDiv=0
Maybridge=0
LifeChemicals=0
CRAFT=0

# plot the sorted data:
import matplotlib.pyplot as plt
fig = plt.figure()
fig.set_size_inches(7,7)
#fig = plt.plot()
x1 = fig.add_subplot(1,1,1)
x1.plot(SimMatECFP4_EnamineSolWat_sorted, proportionECFP4_EnamineSolWat, label="Enamine", c="black")
x1.plot(SimMatECFP4_lanapdb_sorted[0], proportionECFP4_lanapdb, label="LANaPDB", c="green")
x1.plot(SimMatECFP4_lanapdb_sorted[1], proportionECFP4_lanapdb, c="green") # label="LANaPDB"
x1.plot(SimMatECFP4_lanapdb_sorted[2], proportionECFP4_lanapdb, c="green") # label="LANaPDB"
x1.plot(SimMatECFP4_lanapdb_sorted[3], proportionECFP4_lanapdb, c="green") # label="LANaPDB"
x1.plot(SimMatECFP4_lanapdb_sorted[4], proportionECFP4_lanapdb, c="green") # label="LANaPDB"
x1.plot(SimMatECFP4_lanapdb_sorted[5], proportionECFP4_lanapdb, c="green") # label="LANaPDB"
x1.plot(SimMatECFP4_lanapdb_sorted[6], proportionECFP4_lanapdb, c="green") # label="LANaPDB"
x1.plot(SimMatECFP4_lanapdb_sorted[7], proportionECFP4_lanapdb, c="green") # label="LANaPDB"
x1.plot(SimMatECFP4_lanapdb_sorted[8], proportionECFP4_lanapdb, c="green") # label="LANaPDB"
x1.plot(SimMatECFP4_lanapdb_sorted[9], proportionECFP4_lanapdb, c="green") # label="LANaPDBcl"

x1.plot(SimMatECFP4_coconut_sorted[0], proportionECFP4_coconut, label="COCONUT", c="cyan")
x1.plot(SimMatECFP4_coconut_sorted[1], proportionECFP4_coconut,  c="cyan") #label="COCONUT"
x1.plot(SimMatECFP4_coconut_sorted[2], proportionECFP4_coconut, c="cyan") #label="COCONUT"
x1.plot(SimMatECFP4_coconut_sorted[3], proportionECFP4_coconut, c="cyan") #label="COCONUT"
x1.plot(SimMatECFP4_coconut_sorted[4], proportionECFP4_coconut, c="cyan") #label="COCONUT"
x1.plot(SimMatECFP4_coconut_sorted[5], proportionECFP4_coconut, c="cyan") #label="COCONUT"
x1.plot(SimMatECFP4_coconut_sorted[6], proportionECFP4_coconut, c="cyan") #label="COCONUT"
x1.plot(SimMatECFP4_coconut_sorted[7], proportionECFP4_coconut, c="cyan") #label="COCONUT"
x1.plot(SimMatECFP4_coconut_sorted[8], proportionECFP4_coconut, c="cyan") #label="COCONUT"
x1.plot(SimMatECFP4_coconut_sorted[9], proportionECFP4_coconut, c="cyan") #label="COCONUT"

SimMatECFP4_coconut_sorted=0
proportionECFP4_coconut=0
x1.plot(SimMatECFP4_ChemDiv_sorted[0], proportionECFP4_ChemDiv, label="ChemDiv", c="blue")
x1.plot(SimMatECFP4_ChemDiv_sorted[1], proportionECFP4_ChemDiv, c="blue") #label="ChemDiv"
x1.plot(SimMatECFP4_ChemDiv_sorted[2], proportionECFP4_ChemDiv, c="blue") #label="ChemDiv"
x1.plot(SimMatECFP4_ChemDiv_sorted[3], proportionECFP4_ChemDiv, c="blue") #label="ChemDiv"
x1.plot(SimMatECFP4_ChemDiv_sorted[4], proportionECFP4_ChemDiv, c="blue") #label="ChemDiv"
x1.plot(SimMatECFP4_ChemDiv_sorted[5], proportionECFP4_ChemDiv, c="blue") #label="ChemDiv"
x1.plot(SimMatECFP4_ChemDiv_sorted[6], proportionECFP4_ChemDiv, c="blue") #label="ChemDiv"
x1.plot(SimMatECFP4_ChemDiv_sorted[7], proportionECFP4_ChemDiv, c="blue") #label="ChemDiv"
x1.plot(SimMatECFP4_ChemDiv_sorted[8], proportionECFP4_ChemDiv, c="blue") #label="ChemDiv"
x1.plot(SimMatECFP4_ChemDiv_sorted[9], proportionECFP4_ChemDiv, c="blue") #label="ChemDiv"

x1.plot(SimMatECFP4_Maybridge_sorted, proportionECFP4_Maybridge, label="Maybridge", c="purple")

x1.plot(SimMatECFP4_LifeChemicals_sorted[0], proportionECFP4_LifeChemicals, label="LifeChemicals", c="red")
x1.plot(SimMatECFP4_LifeChemicals_sorted[1], proportionECFP4_LifeChemicals, c="red") #label="LifeChemicals"
x1.plot(SimMatECFP4_LifeChemicals_sorted[2], proportionECFP4_LifeChemicals, c="red") #label="LifeChemicals"
x1.plot(SimMatECFP4_LifeChemicals_sorted[3], proportionECFP4_LifeChemicals, c="red") #label="LifeChemicals"
x1.plot(SimMatECFP4_LifeChemicals_sorted[4], proportionECFP4_LifeChemicals, c="red") #label="LifeChemicals"
x1.plot(SimMatECFP4_LifeChemicals_sorted[5], proportionECFP4_LifeChemicals, c="red") #label="LifeChemicals"
x1.plot(SimMatECFP4_LifeChemicals_sorted[6], proportionECFP4_LifeChemicals, c="red") #label="LifeChemicals"
x1.plot(SimMatECFP4_LifeChemicals_sorted[7], proportionECFP4_LifeChemicals, c="red") #label="LifeChemicals"
x1.plot(SimMatECFP4_LifeChemicals_sorted[8], proportionECFP4_LifeChemicals, c="red") #label="LifeChemicals"
x1.plot(SimMatECFP4_LifeChemicals_sorted[9], proportionECFP4_LifeChemicals, c="red") #label="LifeChemicals"

x1.plot(SimMatECFP4_CRAFT_sorted, proportionECFP4_CRAFT, label="CRAFT", c="orange")

x1.grid(alpha=0.5)
x1.set_xlabel('$Similarity$', fontsize=14)
x1.set_ylabel('$Fraction$', fontsize=14)
x1.set_title('Morgan 2', fontsize=18)
#fig1.legend()
fig.legend(loc='lower center', ncol=4, bbox_to_anchor=(0.5, -0.001), fancybox=True, shadow=True)
# Evitar que se traslape la leyenda con los ejes
fig.subplots_adjust(left=0.15, bottom=0.15)

fig.savefig("CDF_fragments_morgan2_5000_sample.png", dpi=400)
